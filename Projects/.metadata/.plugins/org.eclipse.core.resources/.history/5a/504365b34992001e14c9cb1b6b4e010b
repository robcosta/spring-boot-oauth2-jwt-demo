package com.robertocosta.crudcliente.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.robertocosta.crudcliente.dto.ClientDTO;
import com.robertocosta.crudcliente.entities.Client;
import com.robertocosta.crudcliente.repositories.ClientRepository;
import com.robertocosta.crudcliente.service.exceptions.ResourceNotFoundException;
import com.robertocosta.crudcliente.service.exceptions.ResourceUniqueException;

@Service
public class ClientService {
	
	@Autowired
	private ClientRepository repository;
	
	@Transactional(readOnly = true)
	public Page<ClientDTO> findAll(Pageable pageable){
		return repository.findAll(pageable).map(x -> new ClientDTO(x));
	}
	
	@Transactional(readOnly = true)
	public ClientDTO findById(Long id) {
		Client client = repository.findById(id)
				.orElseThrow(() -> new ResourceNotFoundException("Recurso não encontrado!"));
		return new ClientDTO(client);
	}
	
	@Transactional
	public ClientDTO insert(ClientDTO dto) {
		try {
			Client entity = new Client();		
			copyDtoToEntity(dto, entity);		
			entity  = repository.save(entity);
			return new ClientDTO(entity);
		} catch (DataIntegrityViolationException e) {
			throw new ResourceUniqueException("CPF já cadastrado");
		}
	}
	
	@Transactional
	public ClientDTO update(Long id, ClientDTO dto) {
		try {
			Client entity = repository.getReferenceById(id);;
			copyDtoToEntity(dto, entity);		
			entity  = repository.save(entity);
			return new ClientDTO(entity);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
		
	@Transactional
	public void delete(Long id) {
		repository.deleteById(id);
	}
	
	private void copyDtoToEntity(ClientDTO dto, Client entity) {
		entity.setName(dto.getName());
		entity.setCpf(dto.getCpf());
		entity.setIncome(dto.getIncome());
		entity.setBirthDate(dto.getBirthDate());
		entity.setChildren(dto.getChildren());		
	}

	

}
